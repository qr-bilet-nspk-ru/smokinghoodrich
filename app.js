document.addEventListener('DOMContentLoaded', () => {
    const tg = window.Telegram.WebApp;
    tg.expand();
    tg.enableClosingConfirmation();

    const elements = {
        unlockPhase: document.getElementById('unlock-phase'),
        scrollPhase: document.getElementById('scroll-phase'),
        resultPhase: document.getElementById('result-phase'),
        progressBar: document.getElementById('progress-bar'),
        itemsTrack: document.getElementById('items-track'),
        wonItemImage: document.getElementById('won-item-image'),
        wonItemName: document.getElementById('won-item-name'),
        wonItemFlavor: document.getElementById('won-item-flavor'),
        rarityBadge: document.getElementById('rarity-badge'),
        openBtn: document.getElementById('open-btn'),
        continueBtn: document.getElementById('continue-btn'),
        fastOpenBtn: document.getElementById('fast-open-btn'),
        balanceEl: document.getElementById('balance'),
        inventoryCounter: document.getElementById('inventory-counter'),
        freeCaseTimer: document.getElementById('free-case-timer'),
        caseImage: document.querySelector('.case-image')
    };

    // –ü–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ —Å –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—è–º–∏
    const items = [
        // LOOP –ø–∞—á–∫–∏ (—Ä–µ–¥–∫–∏–µ)
        { name: "üçâ –ê—Ä–±—É–∑", image: "images/items/watermelon.png", flavor: "–°–æ—á–Ω—ã–π –ª–µ—Ç–Ω–∏–π –≤–∫—É—Å", rarity: "rare", strength: "2/5", probability: 2 },
        { name: "üîã –≠–Ω–µ—Ä–≥–µ—Ç–∏–∫", image: "images/items/energy.png", flavor: "–ó–∞—Ä—è–¥ –±–æ–¥—Ä–æ—Å—Ç–∏", rarity: "rare", strength: "4/5", probability: 2 },
        { name: "üçë –ü–µ—Ä—Å–∏–∫", image: "images/items/peach.png", flavor: "–ù–µ–∂–Ω–∞—è —Å–ª–∞–¥–æ—Å—Ç—å", rarity: "rare", strength: "1/5", probability: 2 },
        { name: "üçè –Ø–±–ª–æ–∫–æ", image: "images/items/apple.png", flavor: "–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∞—è —Å–≤–µ–∂–µ—Å—Ç—å", rarity: "rare", strength: "2/5", probability: 2 },
        { name: "üçì –ö–ª—É–±–Ω–∏–∫–∞", image: "images/items/strawberry.png", flavor: "–Ø–≥–æ–¥–Ω—ã–π –≤–∑—Ä—ã–≤", rarity: "rare", strength: "3/5", probability: 2 },
        { name: "üéà –ë–∞–±–ª-–ì–∞–º", image: "images/items/bubblegum.png", flavor: "–î–µ—Ç—Å–∫–∞—è —Ä–∞–¥–æ—Å—Ç—å", rarity: "mythical", strength: "1/5", probability: 2 },
        { name: "ü´ê –ï–∂–µ–≤–∏–∫–∞", image: "images/items/blackberry.png", flavor: "–¢–µ—Ä–ø–∫–∞—è –≥–ª—É–±–∏–Ω–∞", rarity: "rare", strength: "3/5", probability: 2 },
        { name: "üçá –í–∏–Ω–æ–≥—Ä–∞–¥", image: "images/items/grape.png", flavor: "–í–∏–Ω–æ–≥—Ä–∞–¥–Ω—ã–π –∫–æ–∫—Ç–µ–π–ª—å", rarity: "rare", strength: "2/5", probability: 2 },
        { name: "ü•∂ –•–æ–ª–æ–¥–æ–∫", image: "images/items/ice.png", flavor: "–õ–µ–¥—è–Ω–∞—è —Å–≤–µ–∂–µ—Å—Ç—å", rarity: "legendary", strength: "5/5", probability: 2 },
        { name: "üçí –í–∏—à–Ω—è", image: "images/items/cherry.png", flavor: "–¢–µ—Ä–ø–∫–∞—è —Å–ª–∞–¥–æ—Å—Ç—å", rarity: "mythical", strength: "4/5", probability: 2 },
        { name: "ü´ê –ß–µ—Ä–Ω–∏–∫–∞", image: "images/items/blueberry.png", flavor: "–õ–µ—Å–Ω–∞—è —è–≥–æ–¥–∞", rarity: "rare", strength: "3/5", probability: 2 },
        
        // –°–∫–∏–¥–∫–∏
        { name: "5% –°–∫–∏–¥–∫–∞", image: "images/items/discount.png", flavor: "–ù–∞ –≤–∞—à —Å–ª–µ–¥—É—é—â–∏–π –∑–∞–∫–∞–∑", rarity: "discount-5", probability: 10 },
        { name: "10% –°–∫–∏–¥–∫–∞", image: "images/items/discount.png", flavor: "–ù–∞ –≤–∞—à —Å–ª–µ–¥—É—é—â–∏–π –∑–∞–∫–∞–∑", rarity: "discount-10", probability: 7 },
        { name: "15% –°–∫–∏–¥–∫–∞", image: "images/items/discount.png", flavor: "–ù–∞ –≤–∞—à —Å–ª–µ–¥—É—é—â–∏–π –∑–∞–∫–∞–∑", rarity: "discount-15", probability: 6 },
        { name: "20% –°–∫–∏–¥–∫–∞", image: "images/items/discount.png", flavor: "–ù–∞ –≤–∞—à —Å–ª–µ–¥—É—é—â–∏–π –∑–∞–∫–∞–∑", rarity: "discount-20", probability: 3 },
        
        // –î—Ä—É–≥–∏–µ –Ω–∞–≥—Ä–∞–¥—ã
        { name: "–ù–∏—á–µ–≥–æ", image: "images/items/nothing.png", flavor: "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑!", rarity: "nothing", probability: 40 },
        { name: "–ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞", image: "images/items/shipping.png", flavor: "–ü—Ä–∏ –∑–∞–∫–∞–∑–µ –æ—Ç 10 –ø–∞—á–µ–∫", rarity: "free-shipping", probability: 2 },
        { name: "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ–∫—Ä—É—Ç", image: "images/items/extra-spin.png", flavor: "–û—Ç–∫—Ä–æ–π—Ç–µ –µ—â–µ –æ–¥–∏–Ω –∫–µ–π—Å –±–µ—Å–ø–ª–∞—Ç–Ω–æ", rarity: "extra-spin", probability: 10 }
    ];

    const config = {
        scrollDuration: 4000,
        itemWidth: 160
    };

    const state = {
        balance: 5,
        isOpening: false,
        scrollPosition: 0,
        targetPosition: 0,
        animationFrameId: null,
        selectedItem: null,
        inventory: [],
        freeCaseTimeLeft: 3600,
        audio: {
            unlock: document.getElementById('unlock-sound'),
            scroll: document.getElementById('scroll-sound'),
            slowdown: document.getElementById('slowdown-sound'),
            win: document.getElementById('win-sound'),
            lose: document.getElementById('lose-sound')
        }
    };

    init();

    function init() {
        setupEventListeners();
        startFreeCaseTimer();
        updateInventoryCounter();
        elements.caseImage.style.animation = "float 4s ease-in-out infinite";
    }

    function setupEventListeners() {
        elements.openBtn.addEventListener('click', () => startOpening(false));
        elements.fastOpenBtn.addEventListener('click', () => {
            if (state.balance >= 3) startOpening(true);
        });
        elements.continueBtn.addEventListener('click', continueAfterWin);
    }

    function startOpening(isFast) {
        if (state.isOpening || state.balance < (isFast ? 3 : 1)) return;
        state.isOpening = true;
        state.balance -= isFast ? 3 : 1;
        elements.balanceEl.textContent = state.balance;

        elements.progressBar.style.width = '0%';
        elements.unlockPhase.style.opacity = '1';
        elements.scrollPhase.style.display = 'none';
        elements.resultPhase.style.display = 'none';

        state.audio.unlock.currentTime = 0;
        state.audio.unlock.play();

        if (isFast) {
            elements.progressBar.style.width = '100%';
            setTimeout(startScrolling, 100);
        } else {
            animateProgressBar();
        }
    }

    function animateProgressBar() {
        let progress = 0;
        const interval = setInterval(() => {
            progress += 2;
            elements.progressBar.style.width = `${progress}%`;
            if (progress >= 100) {
                clearInterval(interval);
                startScrolling();
            }
        }, 20);
    }

    function fillItemsTrack() {
        elements.itemsTrack.innerHTML = '';
        
        // –°–æ–∑–¥–∞–µ–º –≤–∑–≤–µ—à–µ–Ω–Ω—ã–π –º–∞—Å—Å–∏–≤ –ø—Ä–µ–¥–º–µ—Ç–æ–≤
        const weightedItems = [];
        items.forEach(item => {
            for (let i = 0; i < item.probability; i++) {
                weightedItems.push(item);
            }
        });
        
        // –ó–∞–ø–æ–ª–Ω—è–µ–º —Ç—Ä–µ–∫ —Å–ª—É—á–∞–π–Ω—ã–º–∏ –ø—Ä–µ–¥–º–µ—Ç–∞–º–∏ —Å —É—á–µ—Ç–æ–º –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–µ–π
        for (let i = 0; i < 60; i++) { // –£–≤–µ–ª–∏—á–∏–ª –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–µ–¥–º–µ—Ç–æ–≤
            const randomIndex = Math.floor(Math.random() * weightedItems.length);
            const randomItem = weightedItems[randomIndex];
            
            const itemElement = document.createElement('div');
            itemElement.className = 'scroll-item';
            itemElement.innerHTML = `
                <img src="${randomItem.image}" alt="${randomItem.name}">
                <h3>${randomItem.name}</h3>
            `;
            itemElement.dataset.item = JSON.stringify(randomItem);
            elements.itemsTrack.appendChild(itemElement);
        }
    }

    function startScrolling() {
        elements.unlockPhase.style.opacity = '0';
        elements.scrollPhase.style.display = 'flex';
        fillItemsTrack();

        const firstItem = document.querySelector('.scroll-item');
        config.itemWidth = firstItem.offsetWidth + 10;

        // –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é –ø–æ–∑–∏—Ü–∏—é –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ (–≤ –ø–µ—Ä–≤–æ–π –ø–æ–ª–æ–≤–∏–Ω–µ —Ç—Ä–µ–∫–∞)
        const stopIndex = 20 + Math.floor(Math.random() * 20);
        state.targetPosition = stopIndex * config.itemWidth - (window.innerWidth / 2 - config.itemWidth / 2);
        state.scrollPosition = 0;

        state.audio.scroll.currentTime = 0;
        state.audio.scroll.loop = true;
        state.audio.scroll.play();

        state.startTime = performance.now();
        state.animationFrameId = requestAnimationFrame(animateScroll);
    }

    function animateScroll(timestamp) {
        const elapsed = timestamp - state.startTime;
        const progress = Math.min(elapsed / config.scrollDuration, 1);
        const easedProgress = 1 - Math.pow(1 - progress, 3);
        const currentPosition = easedProgress * state.targetPosition;

        elements.itemsTrack.style.transform = `translateX(-${currentPosition}px)`;
        state.scrollPosition = currentPosition;

        updateSelectedItem();

        if (progress < 1) {
            state.animationFrameId = requestAnimationFrame(animateScroll);
        } else {
            finishOpening();
        }
    }

    function updateSelectedItem() {
        const centerX = window.innerWidth / 2;
        let closestItem = null;
        let minDistance = Infinity;

        document.querySelectorAll('.scroll-item').forEach(item => {
            item.classList.remove('selected');
            const rect = item.getBoundingClientRect();
            const itemCenter = rect.left + rect.width / 2;
            const distance = Math.abs(itemCenter - centerX);

            if (distance < minDistance) {
                minDistance = distance;
                closestItem = item;
            }
        });

        if (closestItem) {
            closestItem.classList.add('selected');
            state.selectedItem = JSON.parse(closestItem.dataset.item);
        }
    }

    function finishOpening() {
        elements.scrollPhase.style.display = 'none';
        elements.resultPhase.style.display = 'flex';

        elements.wonItemImage.src = state.selectedItem.image;
        elements.wonItemName.textContent = state.selectedItem.name;
        elements.wonItemFlavor.textContent = state.selectedItem.flavor;

        const rarityText = {
            'common': '–û–ë–´–ß–ù–´–ô',
            'rare': '–†–ï–î–ö–ò–ô',
            'mythical': '–ú–ò–§–ò–ß–ï–°–ö–ò–ô',
            'legendary': '–õ–ï–ì–ï–ù–î–ê–†–ù–´–ô',
            'nothing': '–ü–£–°–¢–û',
            'discount-5': '–°–ö–ò–î–ö–ê 5%',
            'discount-10': '–°–ö–ò–î–ö–ê 10%',
            'discount-15': '–°–ö–ò–î–ö–ê 15%',
            'discount-20': '–°–ö–ò–î–ö–ê 20%',
            'free-shipping': '–ë–ï–°–ü–õ–ê–¢–ù–ê–Ø –î–û–°–¢–ê–í–ö–ê',
            'extra-spin': '–î–û–ü. –ü–†–û–ö–†–£–¢'
        }[state.selectedItem.rarity];

        elements.rarityBadge.textContent = rarityText;
        elements.rarityBadge.className = `rarity-badge ${state.selectedItem.rarity}`;

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –Ω–∞–≥—Ä–∞–¥
        if (state.selectedItem.rarity === 'nothing') {
            state.audio.lose.currentTime = 0;
            state.audio.lose.play();
        } else if (state.selectedItem.rarity === 'extra-spin') {
            state.balance += 1;
            elements.balanceEl.textContent = state.balance;
            state.audio.win.currentTime = 0;
            state.audio.win.play();
        } else {
            state.inventory.push(state.selectedItem);
            updateInventoryCounter();
            state.audio.win.currentTime = 0;
            state.audio.win.play();
        }

        if (navigator.vibrate) navigator.vibrate([100, 50, 100]);
    }

    function continueAfterWin() {
        elements.resultPhase.style.display = 'none';
        elements.unlockPhase.style.opacity = '1';
        state.isOpening = false;

        if (state.balance === 0) {
            state.balance = 3;
            elements.balanceEl.textContent = state.balance;
        }
    }

    function startFreeCaseTimer() {
        setInterval(() => {
            state.freeCaseTimeLeft--;
            const m = Math.floor(state.freeCaseTimeLeft / 60);
            const s = state.freeCaseTimeLeft % 60;
            elements.freeCaseTimer.textContent = `${m}m ${s}s`;

            if (state.freeCaseTimeLeft <= 0) {
                state.balance++;
                elements.balanceEl.textContent = state.balance;
                state.freeCaseTimeLeft = 3600;
            }
        }, 1000);
    }

    function updateInventoryCounter() {
        elements.inventoryCounter.textContent = `–ü—Ä–µ–¥–º–µ—Ç–æ–≤: ${state.inventory.length}`;
    }

    // Telegram main button
    if (tg.platform !== 'unknown') {
        tg.MainButton.setText("–ö—É–ø–∏—Ç—å –ø–ª–∞—Å—Ç–∏–Ω–∫–∏");
        tg.MainButton.onClick(() => {
            tg.showPopup({
                title: "–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞",
                message: "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:",
                buttons: [
                    { id: '5', type: 'default', text: '5 –ø–ª–∞—Å—Ç–∏–Ω–æ–∫ –∑–∞ $5' },
                    { id: '10', type: 'default', text: '10 –ø–ª–∞—Å—Ç–∏–Ω–æ–∫ –∑–∞ $8' }
                ]
            }, (btnId) => {
                if (btnId) {
                    state.balance += parseInt(btnId);
                    elements.balanceEl.textContent = state.balance;
                }
            });
        });
        tg.MainButton.show();
    }
});